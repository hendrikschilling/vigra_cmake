# - Config file for the clif package
# It defines the following variables
#  CLIF_INCLUDE_DIRS - include directories for clif
#  CLIF_LIBRARIES    - libraries to link against
#  CLIF_EXECUTABLE   - the bar executable
#  CLIF_LIBRARY_DIRS - where to find libraries
 
# Compute paths
#get_filename_component(CLIF_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

@PACKAGE_INIT@

cmake_policy(SET CMP0011 NEW)
if (POLICY CMP0054)
  cmake_policy(SET CMP0054 NEW)
endif()

function(pkg_found PKG RET)
  string(TOLOWER ${PKG} LOW)
  string(TOUPPER ${PKG} UP)
  
  set(${RET} FALSE PARENT_SCOPE) 
  
  if (${PKG}_FOUND)
    set(${RET} TRUE PARENT_SCOPE)
      return()
  endif()
  if (${LOW}_FOUND)
    set(${RET} TRUE PARENT_SCOPE)
      return()
  endif()
  if (${UP}_FOUND)
    set(${RET} TRUE PARENT_SCOPE)
      return()
  endif()
  
  if (@_PNU@_${PKG}_FOUND_INDICATOR)
    if (${@_PNU@_${PKG}_FOUND_INDICATOR})
      set(${RET} TRUE PARENT_SCOPE)
      return()
    endif()
  endif()
endfunction()

#@_PNU@ includes and link dirs 
set(@_PNU@_INCLUDE_DIRS "@PACKAGE_CMAKECONFIG_INC@")
set(@_PNU@_LIBRARY_DIRS "@PACKAGE_CMAKECONFIG_LINK@")
set(@_PNU@_LIBRARIES "@CMAKECONFIG_LIB@")
set(@_PNU@_FEATURES "@CMAKECONFIG_FEATURES@")
set(@_PNU@_FOUND false)
set(@PROJECT_NAME@_FOUND false)



#dependencies nicely packaged
set(@_PNU@_PKG_COMPONENTS "@CMAKECONFIG_PKG_COMPONENTS@")
set(@_PNU@_PKG_EXPORT_VARS "@CMAKECONFIG_PKG_EXPORT_VARS@")
 
set(@_PNU@_PACKAGES @CMAKECONFIG_PKG@)
set(@_PNU@_PACKAGES_INC @CMAKECONFIG_PKG_INC@)
set(@_PNU@_PACKAGES_LINK @CMAKECONFIG_PKG_LINK@)
set(@_PNU@_PACKAGES_LIB @CMAKECONFIG_PKG_LIB@)

foreach(F ${@_PNU@_FEATURES})
  set(${F} true)
  string(REPLACE "-" "_" F ${F})
  add_definitions(-D${F})
endforeach()

#########
# comps
#####
list(LENGTH @_PNU@_PKG_COMPONENTS COMP_L_LEN)
math(EXPR COMP_L_MAX "${COMP_L_LEN} - 1")

#reset comp lists
if (NOT ${COMP_L_LEN} LESS 1)
  foreach(IDX RANGE 0 ${COMP_L_MAX} 2)
    math(EXPR IDX2 "${IDX} + 1")
    list(GET @_PNU@_PKG_COMPONENTS ${IDX} C_PKG)
    list(GET @_PNU@_PKG_COMPONENTS ${IDX2} C)
    set(${C_PKG} "")
  endforeach()
endif()

if (NOT ${COMP_L_LEN} LESS 1)
  foreach(IDX RANGE 0 ${COMP_L_MAX} 2)
    math(EXPR IDX2 "${IDX} + 1")
    list(GET @_PNU@_PKG_COMPONENTS ${IDX} C_PKG)
    list(GET @_PNU@_PKG_COMPONENTS ${IDX2} C)
    list(APPEND ${C_PKG} ${C})
  endforeach()
endif()

#######
# export vars
#####
list(LENGTH @_PNU@_PKG_EXPORT_VARS COMP_L_LEN)
math(EXPR COMP_L_MAX "${COMP_L_LEN} - 1")

#set variables from list
if (NOT ${COMP_L_LEN} LESS 1)
  foreach(IDX RANGE 0 ${COMP_L_MAX} 2)
    math(EXPR IDX2 "${IDX} + 1")
    list(GET @_PNU@_PKG_EXPORT_VARS ${IDX} NAME)
    list(GET @_PNU@_PKG_EXPORT_VARS ${IDX2} VALUE)
    set(${NAME} ${VALUE})
  endforeach()
endif()

#message("@_PNU@ dependency search")
#search package, try our own findXXX.cmake in find dir if not found
# FIXME check wether package was already searched and found!
set(@_PNU@_MISSING "")
foreach(PACKAGE ${@_PNU@_PACKAGES})
  if (FDP_HAVE_SEARCHED_${PACKAGE} AND "${FDP_HAVE_SEARCHED_${PACKAGE}_COMPONENTS}" STREQUAL "${@_PNU@_${PACKAGE}_COMPONENTS}")
    #message("already searched for ${PACKAGE}")
  else()
    set(FDP_HAVE_SEARCHED_${PACKAGE} true)
    set(FDP_HAVE_SEARCHED_${PACKAGE}_COMPONENTS ${@_PNU@_${PACKAGE}_COMPONENTS})
  
  
    if (@_PNU@_${PACKAGE}_COMPONENTS)
      #message(STATUS "search with COMPS: ${@_PNU@_${PACKAGE}_COMPONENTS}")
      find_package(${PACKAGE} QUIET COMPONENTS ${@_PNU@_${PACKAGE}_COMPONENTS} ${@_PNU@_${PACKAGE}_FIND_FLAGS})
    else()
      find_package(${PACKAGE} QUIET ${@_PNU@_${PACKAGE}_FIND_FLAGS})
    endif()
    
    pkg_found(${PACKAGE} FOUND)
    if (FOUND)
      #message("${PACKAGE} - found")
    else()
      string(TOLOWER ${PACKAGE} PKG_LOW)
      list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/find/${PKG_LOW})
    endif()
    
    if (@_PNU@_${PACKAGE}_COMPONENTS)
      find_package(${PACKAGE} QUIET COMPONENTS ${@_PNU@_${PACKAGE}_COMPONENTS} ${@_PNU@_${PACKAGE}_FIND_FLAGS})
    else()
      find_package(${PACKAGE} QUIET ${@_PNU@_${PACKAGE}_FIND_FLAGS})
    endif()
    
    
    pkg_found(${PACKAGE} FOUND)
    if (FOUND)
      set(FDP_HAVE_FOUND_${PACKAGE} TRUE)
    else()
      set(FDP_HAVE_FOUND_${PACKAGE} FALSE)
      list(APPEND @_PNU@_MISSING ${PACKAGE})
    endif()
  endif()
endforeach()

if (NOT @_PNU@_MISSING)
  set(@_PNU@_FOUND TRUE)
  set(@PROJECT_NAME@_FOUND TRUE)
  
  
  foreach(INCLUDE ${@_PNU@_PACKAGES_INC})
    list(APPEND @_PNU@_INCLUDE_DIRS ${${INCLUDE}})
  endforeach()

  foreach(LIBDIR ${@_PNU@_PACKAGES_LINK})
    list(APPEND @_PNU@_LIBRARY_DIRS ${${LIBDIR}})
  endforeach()

  foreach(LIB ${@_PNU@_PACKAGES_LIB})
    list(APPEND @_PNU@_LIBRARIES ${${LIB}})
  endforeach()
else()
  set(@_PNU@_INCLUDE_DIRS "")
  set(@_PNU@_LIBRARY_DIRS "")
  set(@_PNU@_LIBRARIES "")
  set(@_PNU@_FEATURES "")
  set(@_PNU@_FOUND FALSE)
  set(@PROJECT_NAME@_FOUND FALSE)
  
  message("@_PNU@ missing dependencies")
  foreach(L ${@_PNU@_MISSING})
    message("   ${L}")
  endforeach()
  message(FATAL_ERROR "@PROJECT_NAME@Config.cmake missing required dependencies - your system may have changed since creating this config, either provide the missing dependencies or remove this project from your dependecy search!")
endif()

