hdf5:
- perl finding (gen headers only if ...?)
- gen headers in build dir

paths:
- replace all CMAKE_BUILd_DIR instance with the respective path (differes depending on location!)

various
- alle VAD files should be an explicit dependency in cmake (for auto-rebuild!)

variables:
- its not enough to generate a target somw variables need to be set (globally in CACHE) for _other_ dependencies (e.g. eigen -> ceres)

IDEA:
- hijack (or replace with something else) add_library to provide auto-build/checkout of targets!

- PROBLEMS: global variable force a lot of rebuilding...


CMAKE/libs:
- gen header dirs on config run (not as target!)
- fix vad_make_imported_target_global to not use alias? (fixes add_dependencies problems, see VAD_Ceres)
- don't use CMAKE_MODULE_PATH for VAD_*** (is sometimes overwritten, for example _within_ CeresConfig!)

- CHECK: some find_packages (like HDF5) call themselves again (with different options!)
- check alternatives! (e.g. Eigen or Eigen3?)


Eigen:
- should not add eigen path to camek package repo because a later search will find build_external_dep/eigenconfig!

- Boost: recursion caused by findboost.cmak -> find_package(boost ...) -> vad_system -> findboost...
- same for hdf5 (relation with components?)
- vad_live - if autodep dep is not fullfilled - skip live build (else cmake probably aborts in the added subproject!) 
      ex. hdf5 - perl! -> but still continue rest  and abort at end (to add more rec.deps!)

      
- if find_package_plus resets all vars modified by a previous call - how can we pass such vars from user!? ex.: PERL_EXECUTABLE (delete them all on startup?) - should global vars be reset at end (and new_vars_... be deleted?!) else single error can propagate into future runs!, even if user changes a variable (and it is therefore not added by a script)
 example: find_perl adds PERL_EXECUTABLE - user changes it - will be deleted when resetting variables!

- GENERAL problem: vars that land in the cache will NEVER be overwritten! example: hdf5 -> missing perl -> perl_found = FALSE! in cache!
  - solution? detect wether variables are in cache or regular: overwriting detection - does not work
                      - get_property (type) - can be empty even for cache...
